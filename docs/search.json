[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"技術ブログを始めました。\nとてもお世話になった「R言語」についてメインで書いていきます。\n2025-02-11から作成してます。Last Update:","code":"## [1] \"2025-03-29\""},{"path":"ggplot2でグラフを描く.html","id":"ggplot2でグラフを描く","chapter":"2 ggplot2でグラフを描く","heading":"2 ggplot2でグラフを描く","text":"","code":""},{"path":"ggplot2でグラフを描く.html","id":"使用するデータ","chapter":"2 ggplot2でグラフを描く","heading":"2.1 使用するデータ","text":"使用するデータは、Rのサンプルデータ「cars」。","code":"\nsummary(cars)##      speed           dist       \n##  Min.   : 4.0   Min.   :  2.00  \n##  1st Qu.:12.0   1st Qu.: 26.00  \n##  Median :15.0   Median : 36.00  \n##  Mean   :15.4   Mean   : 42.98  \n##  3rd Qu.:19.0   3rd Qu.: 56.00  \n##  Max.   :25.0   Max.   :120.00"},{"path":"ggplot2でグラフを描く.html","id":"package","chapter":"2 ggplot2でグラフを描く","heading":"2.2 Package","text":"Rでグラフを描くなら、「ggplot2」パッケージです。","code":"\nlibrary(ggplot2)"},{"path":"ggplot2でグラフを描く.html","id":"普通のグラフ","chapter":"2 ggplot2でグラフを描く","heading":"2.3 普通のグラフ","text":"RのDefaultでグラフを描くと下記のようになります。","code":"\nplot(cars)"},{"path":"ggplot2でグラフを描く.html","id":"ggplot2のグラフ","chapter":"2 ggplot2でグラフを描く","heading":"2.4 ggplot2のグラフ","text":"Rのggplot2でグラフを描くと下記のようになります。","code":"\n# colnames(cars)\nggplot(cars, aes(x=speed, y=dist)) +\n    geom_point(size=3)"},{"path":"ggplot2でグラフを描く.html","id":"少し装飾すると","chapter":"2 ggplot2でグラフを描く","heading":"2.5 少し装飾すると…","text":"","code":"\n# Windowsフォントを設定\nwindowsFonts(\"MEI\"=windowsFont(\"Meiryo\"))\n# colnames(cars)\nggplot(cars, aes(x=speed, y=dist)) + \n  geom_point(size=3, color=\"blue\") +\n  ggtitle(\"車のスピードと停止距離\") + \n  theme_minimal(base_size = 12, base_family = \"MEI\")"},{"path":"ggplot2でグラフを描く.html","id":"最後に","chapter":"2 ggplot2でグラフを描く","heading":"2.6 最後に","text":"グラフは楽しい！！","code":""},{"path":"plotlyでグラフを描く.html","id":"plotlyでグラフを描く","chapter":"3 plotlyでグラフを描く","heading":"3 plotlyでグラフを描く","text":"","code":""},{"path":"plotlyでグラフを描く.html","id":"使用するデータ-1","chapter":"3 plotlyでグラフを描く","heading":"3.1 使用するデータ","text":"使用するデータは、Rのサンプルデータ「airquality」にします。","code":"\nsummary(airquality)##      Ozone           Solar.R           Wind             Temp      \n##  Min.   :  1.00   Min.   :  7.0   Min.   : 1.700   Min.   :56.00  \n##  1st Qu.: 18.00   1st Qu.:115.8   1st Qu.: 7.400   1st Qu.:72.00  \n##  Median : 31.50   Median :205.0   Median : 9.700   Median :79.00  \n##  Mean   : 42.13   Mean   :185.9   Mean   : 9.958   Mean   :77.88  \n##  3rd Qu.: 63.25   3rd Qu.:258.8   3rd Qu.:11.500   3rd Qu.:85.00  \n##  Max.   :168.00   Max.   :334.0   Max.   :20.700   Max.   :97.00  \n##  NA's   :37       NA's   :7                                       \n##      Month            Day      \n##  Min.   :5.000   Min.   : 1.0  \n##  1st Qu.:6.000   1st Qu.: 8.0  \n##  Median :7.000   Median :16.0  \n##  Mean   :6.993   Mean   :15.8  \n##  3rd Qu.:8.000   3rd Qu.:23.0  \n##  Max.   :9.000   Max.   :31.0  \n## "},{"path":"plotlyでグラフを描く.html","id":"package-1","chapter":"3 plotlyでグラフを描く","heading":"3.2 Package","text":"触れるグラフを描くなら、「plotly」パッケージです。","code":"\nlibrary(plotly)"},{"path":"plotlyでグラフを描く.html","id":"plotlyのグラフ","chapter":"3 plotlyでグラフを描く","heading":"3.3 plotlyのグラフ","text":"plotlyでグラフを描くと下記のようになります。\nグラフがグリグリ動かせます♪","code":"\nplot_ly(airquality,\n        x=~Month, \n        y=~Temp, \n        z=~Ozone,\n        color=~Ozone, \n        mode= \"markers\",\n        size=8,    \n        type = \"scatter3d\") %>% \n  layout(title = \"airquality\")"},{"path":"plotlyでグラフを描く.html","id":"最後に-1","chapter":"3 plotlyでグラフを描く","heading":"3.4 最後に","text":"グラフって楽しい！！Plotlyすごい。","code":""},{"path":"leafletで地図を作成する.html","id":"leafletで地図を作成する","chapter":"4 leafletで地図を作成する","heading":"4 leafletで地図を作成する","text":"","code":""},{"path":"leafletで地図を作成する.html","id":"package-2","chapter":"4 leafletで地図を作成する","heading":"4.1 Package","text":"触れる地図を描くなら、Leafletですね。","code":"\nlibrary(leaflet)"},{"path":"leafletで地図を作成する.html","id":"地図に点","chapter":"4 leafletで地図を作成する","heading":"4.2 地図に点","text":"地図に点（マーカー）を配置します。","code":"\nleaflet() %>%\n  addTiles() %>%\n  addMarkers(lng=139.745461, lat=35.65856, popup=\"This is the Tokyo Tower.\")"},{"path":"leafletで地図を作成する.html","id":"最後に-2","chapter":"4 leafletで地図を作成する","heading":"4.3 最後に","text":"Leafletを紹介しましたが、GIS分析のところを詳しく書いていこうかな。","code":""},{"path":"osmdataでデータを抽出する.html","id":"osmdataでデータを抽出する","chapter":"5 osmdataでデータを抽出する","heading":"5 osmdataでデータを抽出する","text":"","code":""},{"path":"osmdataでデータを抽出する.html","id":"はじめに","chapter":"5 osmdataでデータを抽出する","heading":"5.1 はじめに","text":"osmdataは、open street mapのデータを抽出できるPackageです。\n簡易に分析するときなど、osmdataを使うのもありかなと…。","code":""},{"path":"osmdataでデータを抽出する.html","id":"package-3","chapter":"5 osmdataでデータを抽出する","heading":"5.2 Package","text":"osmdataです。GIS系のsfも使います。leafletはアウトプット用。","code":"\nlibrary(leaflet)\nlibrary(osmdata)\nlibrary(sf)"},{"path":"osmdataでデータを抽出する.html","id":"データを取得する範囲を決める","chapter":"5 osmdataでデータを抽出する","heading":"5.3 データを取得する範囲を決める","text":"まずは範囲を決めます。今回は、仙台市にします。\nこれは、仙台市がすっぽり入るBox範囲内を対象にしています。","code":"\nread_bb = getbb('sendai')\nprint(read_bb)##         min      max\n## x 140.46947 141.2603\n## y  38.05085  38.4547"},{"path":"osmdataでデータを抽出する.html","id":"レジャーをゲット","chapter":"5 osmdataでデータを抽出する","heading":"5.4 レジャーをゲット","text":"範囲内にあるレジャーなところを取得します。\nPC環境によりますが、データ取得には数分かかります。","code":"\nx = opq(bbox = read_bb) %>% \n  add_osm_feature(key = 'leisure') %>% \n  osmdata_sf()\n\n#polygonだけにする。\nx_sf = x$osm_polygon\nx_sf = subset(x_sf,!is.na(x_sf$name))\n\n#余計な列を除外。\nx_sf_disp = x_sf[,c(\"name\",\"geometry\")]\nprint(x_sf_disp)## Simple feature collection with 2356 features and 1 field\n## Geometry type: POLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 140.5636 ymin: 38.05114 xmax: 141.2622 ymax: 38.45594\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##                        name                       geometry\n## 38812192      榴岡3丁目公園 POLYGON ((140.8874 38.26092...\n## 60981058   田子二丁目北公園 POLYGON ((140.9592 38.28326...\n## 61578891      田子2丁目公園 POLYGON ((140.9612 38.28038...\n## 61885151     高砂二丁目緑地 POLYGON ((140.9682 38.27068...\n## 62123827         清水沼公園 POLYGON ((140.8977 38.26628...\n## 62214328 岩沼海浜緑地野球場 POLYGON ((140.9318 38.11777...\n## 68087809         宮千代公園 POLYGON ((140.9104 38.25429...\n## 72107597         福住町公園 POLYGON ((140.9526 38.2729,...\n## 72107601     扇町一丁目公園 POLYGON ((140.9417 38.27221...\n## 76739089     上田子２号公園 POLYGON ((140.963 38.28284,..."},{"path":"osmdataでデータを抽出する.html","id":"地図にプロット","chapter":"5 osmdataでデータを抽出する","heading":"5.5 地図にプロット","text":"レジャーなポリゴンを表示します。どこに行こうかな。","code":"\n#mapに表示する\nleaflet() %>% \n  addTiles() %>%\n  addPolygons(data= x_sf_disp, color = \"blue\", popup=~name)"},{"path":"osmdataでデータを抽出する.html","id":"最後に-3","chapter":"5 osmdataでデータを抽出する","heading":"5.6 最後に","text":"open street mapに感謝感謝。本当に助かります。","code":""},{"path":"wideなデータをlongにそして要約する.html","id":"wideなデータをlongにそして要約する","chapter":"6 wideなデータをLongに。そして要約する","heading":"6 wideなデータをLongに。そして要約する","text":"","code":""},{"path":"wideなデータをlongにそして要約する.html","id":"はじめに-1","chapter":"6 wideなデータをLongに。そして要約する","heading":"6.1 はじめに","text":"人間は、Wideなデータのほうが理解しやすい。\n一方で、機械や計算には、Longなデータが扱いやすい。\nということで、今回は、WideなデータをLongに変換します。\nなお、以前は「Reshape」を使っていましたが、今は「tidyverse」の方が便利かも。\n今回はこちらを使用します。","code":""},{"path":"wideなデータをlongにそして要約する.html","id":"package-4","chapter":"6 wideなデータをLongに。そして要約する","heading":"6.2 Package","text":"使用するのは、「dplyr」と「tidyverse」パッケージです。\nテーブル表示に「DT」も使います。","code":"\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(DT) #for Table display"},{"path":"wideなデータをlongにそして要約する.html","id":"使用するデータ-2","chapter":"6 wideなデータをLongに。そして要約する","heading":"6.3 使用するデータ","text":"使用するデータは、Rのサンプルデータ「WorldPhones」にします。\n扱いやすいように加工します。","code":"\nread_df = WorldPhones %>%\n  as.data.frame() %>%\n  rownames_to_column(\"Year\")\n\n#Table disp\ndatatable(read_df)"},{"path":"wideなデータをlongにそして要約する.html","id":"wideからlongに変換","chapter":"6 wideなデータをLongに。そして要約する","heading":"6.4 WideからLongに変換","text":"pivot_longer()を使用してLongに変換します。","code":"\ndf_long = read_df %>% \n  pivot_longer(cols = -c(Year),names_to = \"area\", values_to = \"val\" )\n\n#Table disp\ndatatable(df_long)"},{"path":"wideなデータをlongにそして要約する.html","id":"要約する","chapter":"6 wideなデータをLongに。そして要約する","heading":"6.5 要約する","text":"Longなデータは要約も簡単です。\n下記は、area毎にvalを各種要約しています。","code":"\ns_data = df_long %>% \n  group_by(area) %>% \n  summarise(\n    numOfRecord = n(),\n    mean_val = mean(val),\n    max_val = max(val),\n    min_val = min(val),\n    p_005 = quantile(val, probs = 0.05),\n    p_095 = quantile(val, probs = 0.95)\n  )\n\n#Table disp\ndatatable(s_data)"},{"path":"wideなデータをlongにそして要約する.html","id":"最後に-4","chapter":"6 wideなデータをLongに。そして要約する","heading":"6.6 最後に","text":"データ分析って楽しい！","code":""},{"path":"シーケンス図を描く.html","id":"シーケンス図を描く","chapter":"7 シーケンス図を描く","heading":"7 シーケンス図を描く","text":"","code":""},{"path":"シーケンス図を描く.html","id":"はじめに-2","chapter":"7 シーケンス図を描く","heading":"7.1 はじめに","text":"20年位前、こういう図はEXCELで描いていました。\nまぁ、いまでも時々使いますが、こういうのも再現可能に作成できるのは本当にうれしいです。","code":""},{"path":"シーケンス図を描く.html","id":"package-5","chapter":"7 シーケンス図を描く","heading":"7.2 Package","text":"使用するのは、「DiagrammeR」パッケージです。","code":"\nlibrary(DiagrammeR)"},{"path":"シーケンス図を描く.html","id":"シーケンス図を書く","chapter":"7 シーケンス図を描く","heading":"7.3 シーケンス図を書く","text":"こんな感じに、シーケンス図が出来上がります。ALTにも対応している。","code":"\n# Create a sequence diagram\nDiagrammeR(\"\nsequenceDiagram;\n   customer->>ticket seller: ask for a ticket;\n   ticket seller->>database: seats;\n   alt tickets available\n     database->>ticket seller: ok;\n     ticket seller->>customer: confirm;\n     customer->>ticket seller: ok;\n     ticket seller->>database: book a seat;\n     ticket seller->>printer: print a ticket;\n   else sold out\n     database->>ticket seller: none left;\n     ticket seller->>customer: sorry;\n   end\n\")"},{"path":"シーケンス図を描く.html","id":"シーケンス図を書く2","chapter":"7 シーケンス図を描く","heading":"7.4 シーケンス図を書く2","text":"こんなのもできる。","code":"\nDiagrammeR(\"\nsequenceDiagram;\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop HealthCheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n\")"},{"path":"シーケンス図を描く.html","id":"よく書くやつ","chapter":"7 シーケンス図を描く","heading":"7.5 よく書くやつ","text":"私の世界では、こんな図をよく書いていた。","code":"\nDiagrammeR(\"\nsequenceDiagram;\n    participant UE\n    participant eNB\n    UE->>eNB: rrcConnectionRequest\n    Note right of eNB: Admission Check\n    alt Admission OK\n     eNB->>UE: rrcConnectionSetup\n     UE->>eNB: rrcConnectionSetupComplete\n    else Admission NG\n     eNB->>UE: rrcConnectionReject\n   end\n\n\")"},{"path":"シーケンス図を描く.html","id":"リンク","chapter":"7 シーケンス図を描く","heading":"7.6 リンク","text":"Mermaid公式リンク\n[link] https://mermaid.js.org/syntax/sequenceDiagram.html","code":""},{"path":"シーケンス図を描く.html","id":"最後に-5","chapter":"7 シーケンス図を描く","heading":"7.7 最後に","text":"シーケンス図、まだ活躍するはず！！（しないかな…。）\nあと、Alice、Bobとくると、次は、Charlieであってほしいのは、職業病か。","code":""},{"path":"ggpairsで重回帰分析.html","id":"ggpairsで重回帰分析","chapter":"8 ggpairsで重回帰分析","heading":"8 ggpairsで重回帰分析","text":"","code":""},{"path":"ggpairsで重回帰分析.html","id":"はじめに-3","chapter":"8 ggpairsで重回帰分析","heading":"8.1 はじめに","text":"データ分析するときって、まずはデータがどんな感じなのかを理解することから始めますよね。そんな時の分析の紹介です。","code":""},{"path":"ggpairsで重回帰分析.html","id":"使用するデータ-3","chapter":"8 ggpairsで重回帰分析","heading":"8.2 使用するデータ","text":"使用するデータは、Rのサンプルデータ「iris」にします。","code":"\nsummary(iris)##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n##        Species  \n##  setosa    :50  \n##  versicolor:50  \n##  virginica :50  \n##                 \n##                 \n## "},{"path":"ggpairsで重回帰分析.html","id":"package-6","chapter":"8 ggpairsで重回帰分析","heading":"8.3 Package","text":"おすすめは、「GGally」です。\nそして、触れるグラフを描くなら、「plotly」パッケージです。","code":"\nlibrary(plotly)\nlibrary(GGally)"},{"path":"ggpairsで重回帰分析.html","id":"分析","chapter":"8 ggpairsで重回帰分析","heading":"8.4 分析","text":"ggpairs()で、サクッと分析。すごすぎる。","code":"\nggpairs(iris)"},{"path":"ggpairsで重回帰分析.html","id":"分析2","chapter":"8 ggpairsで重回帰分析","heading":"8.5 分析2","text":"もう少し見やすく装飾してみます。","code":"\np = ggpairs(iris,\n            title = \"iris\",\n            mapping = aes(color = Species, alpha = 0.2),\n            upper = list(continuous = wrap(\"cor\", size = 2.5)),\n            lower = list(continuous = wrap(\"points\", size=1))\n) + theme(text=element_text(size=9))\n\nggplotly(p)"},{"path":"ggpairsで重回帰分析.html","id":"最後に-6","chapter":"8 ggpairsで重回帰分析","heading":"8.6 最後に","text":"データ分析って楽しい！","code":""},{"path":"nwデータを可視化する.html","id":"nwデータを可視化する","chapter":"9 NWデータを可視化する","heading":"9 NWデータを可視化する","text":"","code":""},{"path":"nwデータを可視化する.html","id":"はじめに-4","chapter":"9 NWデータを可視化する","heading":"9.1 はじめに","text":"FromとToがあるデータ（AからBへValueを渡す。みたいなデータ）がある場合の可視化の例です。","code":""},{"path":"nwデータを可視化する.html","id":"使用するデータ-4","chapter":"9 NWデータを可視化する","heading":"9.2 使用するデータ","text":"今回はデータを作成します。","code":"\na_group = c(\"A\",\"B\",\"C\",\"D\",\"E\")\n\nnw_data = data.frame(\n  # id = seq(1:5),\n  \"From_ID\" = sample(a_group,5),\n  \"To_ID\"   = sample(a_group,5),\n  \"Value\"   = sample(1:10,5, replace=F)\n)\nhead(nw_data)##   From_ID To_ID Value\n## 1       D     D     9\n## 2       C     E     3\n## 3       B     A    10\n## 4       A     B     7\n## 5       E     C     6"},{"path":"nwデータを可視化する.html","id":"package-7","chapter":"9 NWデータを可視化する","heading":"9.3 Package","text":"おすすめは、「visNetwork」です。","code":"\nlibrary(visNetwork)"},{"path":"nwデータを可視化する.html","id":"nodeの作成","chapter":"9 NWデータを可視化する","heading":"9.4 Nodeの作成","text":"Nodeを作成します。","code":"\n#nodeデータの作成\nnodes = data.frame(\n  id = a_group,\n  label = a_group\n)\nhead(nodes)##   id label\n## 1  A     A\n## 2  B     B\n## 3  C     C\n## 4  D     D\n## 5  E     E"},{"path":"nwデータを可視化する.html","id":"edgesの作成","chapter":"9 NWデータを可視化する","heading":"9.5 edgesの作成","text":"edgesを作成します。","code":"\nedges = data.frame(\n  from = nw_data$From_ID,\n  to   = nw_data$To_ID,\n  label = as.character(nw_data$Value),\n  width = nw_data$Value/2,\n  color = \"darkgray\"\n)\nhead(edges)##   from to label width    color\n## 1    D  D     9   4.5 darkgray\n## 2    C  E     3   1.5 darkgray\n## 3    B  A    10   5.0 darkgray\n## 4    A  B     7   3.5 darkgray\n## 5    E  C     6   3.0 darkgray"},{"path":"nwデータを可視化する.html","id":"可視化する","chapter":"9 NWデータを可視化する","heading":"9.6 可視化する","text":"nodeとedgeが出来上がれば、可視化できます。グリグリ動きます。","code":"\nvisNetwork(nodes, edges) %>%\n  visEdges(arrows = 'to', length = 200)"},{"path":"nwデータを可視化する.html","id":"参考リンク","chapter":"9 NWデータを可視化する","heading":"9.7 参考リンク","text":"[link] https://datastorm-open.github.io/visNetwork/","code":""},{"path":"nwデータを可視化する.html","id":"最後に-7","chapter":"9 NWデータを可視化する","heading":"9.8 最後に","text":"ネットワークを可視化して、眺めてみる。","code":""},{"path":"ポリゴンにbufferを作成する.html","id":"ポリゴンにbufferを作成する","chapter":"10 ポリゴンにBufferを作成する","heading":"10 ポリゴンにBufferを作成する","text":"","code":""},{"path":"ポリゴンにbufferを作成する.html","id":"はじめに-5","chapter":"10 ポリゴンにBufferを作成する","heading":"10.1 はじめに","text":"GISにおける、ポリゴンの操作の１つ、バッファの作成について書きます。","code":""},{"path":"ポリゴンにbufferを作成する.html","id":"使用するデータ-5","chapter":"10 ポリゴンにBufferを作成する","heading":"10.2 使用するデータ","text":"ノースカロライナのシェープファイルを読み込み、このデータを使用します。\nこれは、「sf」パッケージについています。","code":"\n#ノースカロライナのシェープファイルを読み込み\ninput <- sf::read_sf(system.file(\"shape/nc.shp\", package = \"sf\"))\ninput## Simple feature collection with 100 features and 14 fields\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\n## Geodetic CRS:  NAD27\n## # A tibble: 100 × 15\n##     AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74\n##    <dbl>     <dbl> <dbl>   <dbl> <chr> <chr>  <dbl>    <int> <dbl> <dbl>   <dbl>\n##  1 0.114      1.44  1825    1825 Ashe  37009  37009        5  1091     1      10\n##  2 0.061      1.23  1827    1827 Alle… 37005  37005        3   487     0      10\n##  3 0.143      1.63  1828    1828 Surry 37171  37171       86  3188     5     208\n##  4 0.07       2.97  1831    1831 Curr… 37053  37053       27   508     1     123\n##  5 0.153      2.21  1832    1832 Nort… 37131  37131       66  1421     9    1066\n##  6 0.097      1.67  1833    1833 Hert… 37091  37091       46  1452     7     954\n##  7 0.062      1.55  1834    1834 Camd… 37029  37029       15   286     0     115\n##  8 0.091      1.28  1835    1835 Gates 37073  37073       37   420     0     254\n##  9 0.118      1.42  1836    1836 Warr… 37185  37185       93   968     4     748\n## 10 0.124      1.43  1837    1837 Stok… 37169  37169       85  1612     1     160\n## # ℹ 90 more rows\n## # ℹ 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>,\n## #   geometry <MULTIPOLYGON [°]>"},{"path":"ポリゴンにbufferを作成する.html","id":"package-8","chapter":"10 ポリゴンにBufferを作成する","heading":"10.3 Package","text":"おすすめは、「sf」です。\nまた、今回は、QGISのアルゴリズムで作成する方法も解説します。\nこちらは「qgisprocess」です。","code":"\nlibrary(qgisprocess) #QGIS Algorithm\nlibrary(dplyr)\nlibrary(sf) #GIS用\nlibrary(leaflet) #Map"},{"path":"ポリゴンにbufferを作成する.html","id":"入力データを可視化","chapter":"10 ポリゴンにBufferを作成する","heading":"10.4 入力データを可視化","text":"ノースカロライナを可視化します。","code":"\n#Leafletに出力するため、WGS84に変更する\ninput_disp = input %>% st_transform(crs=4326)\n\n#Leafletに出力\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data = input_disp, color=\"blue\")"},{"path":"ポリゴンにbufferを作成する.html","id":"sfで5kmのbufferを作成","chapter":"10 ポリゴンにBufferを作成する","heading":"10.5 sfで5kmのBufferを作成","text":"測地系（CRS）を設定して、st_union()で合成し、\nst_buffer()で、5000mのバッファを作成します。\n赤色の線で、Bufferしたポリゴンを表します。","code":"\n#meter bufferを作成するため、ノースカロライナのEPSGに変換(st_transform)する。\n#各州を結合(st_union)して、sfのBuffer作成する。\nsf_ret = input %>% st_transform(crs=26717) %>%\n  st_union() %>% st_as_sf() %>% \n  st_buffer(dist = 5000)\n\n#表示用にWGS84に直す\nb_sf = sf_ret %>% st_transform(crs=4326)\n\n#Leafletで表示\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data = input_disp, color=\"blue\") %>%\n  addPolylines(data = b_sf, weight=10,color=\"red\") %>%\n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"ポリゴンにbufferを作成する.html","id":"qgisの準備","chapter":"10 ポリゴンにBufferを作成する","heading":"10.6 QGISの準備","text":"RでQGIS algorithmを利用できるんです。これ、かなり使える気がする。\n以下で、QGISで使用できるアルゴリズムを探して使用します。\n今回は、「native:buffer」を使用します。","code":"\n#QGIS algorithmの情報\nqgis_search_algorithms(\"buffer\")## # A tibble: 11 × 5\n##    provider provider_title    group                algorithm     algorithm_title\n##    <chr>    <chr>             <chr>                <chr>         <chr>          \n##  1 gdal     GDAL              Vector geoprocessing gdal:bufferv… Buffer vectors \n##  2 gdal     GDAL              Vector geoprocessing gdal:oneside… One side buffer\n##  3 grass    GRASS             Raster (r.*)         grass:r.buff… r.buffer       \n##  4 grass    GRASS             Raster (r.*)         grass:r.buff… r.buffer.lowmem\n##  5 grass    GRASS             Vector (v.*)         grass:v.buff… v.buffer       \n##  6 native   QGIS (native c++) Vector geometry      native:buffer Buffer         \n##  7 native   QGIS (native c++) Vector geometry      native:buffe… Variable width…\n##  8 native   QGIS (native c++) Vector geometry      native:multi… Multi-ring buf…\n##  9 native   QGIS (native c++) Vector geometry      native:singl… Single sided b…\n## 10 native   QGIS (native c++) Vector geometry      native:taper… Tapered buffers\n## 11 native   QGIS (native c++) Vector geometry      native:wedge… Create wedge b…\nq_alg = \"native:buffer\"\nq_alg_arguments = qgis_get_argument_specs(q_alg)\nq_alg_arguments## # A tibble: 9 × 6\n##   name    description qgis_type default_value available_values acceptable_values\n##   <chr>   <chr>       <chr>     <list>        <list>           <list>           \n## 1 INPUT   Input layer source    <NULL>        <NULL>           <chr [1]>        \n## 2 DISTAN… Distance    distance  <int [1]>     <NULL>           <chr [3]>        \n## 3 SEGMEN… Segments    number    <int [1]>     <NULL>           <chr [3]>        \n## 4 END_CA… End cap st… enum      <int [1]>     <chr [3]>        <chr [2]>        \n## 5 JOIN_S… Join style  enum      <int [1]>     <chr [3]>        <chr [2]>        \n## 6 MITER_… Miter limit number    <int [1]>     <NULL>           <chr [3]>        \n## 7 DISSOL… Dissolve r… boolean   <lgl [1]>     <NULL>           <chr [4]>        \n## 8 SEPARA… Keep disjo… boolean   <lgl [1]>     <NULL>           <chr [4]>        \n## 9 OUTPUT  Buffered    sink      <NULL>        <NULL>           <chr [1]>"},{"path":"ポリゴンにbufferを作成する.html","id":"qgisで1kmのbufferを作成","chapter":"10 ポリゴンにBufferを作成する","heading":"10.7 QGISで1kmのBufferを作成","text":"測地系（CRS）を設定して、st_union()で合成し、\nQGIS Algorithm 「native:buffer」で、1000mのバッファを作成します。\n赤色の線で、Bufferしたポリゴンを表します。","code":"\n#meter bufferのため、ノースカロライナのEPSGに変換する。\ninput_a = input %>% \n  st_union() %>% st_as_sf() %>% \n  st_transform(crs=26717)\ninput_a## Simple feature collection with 1 feature and 0 fields\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 196586.7 ymin: 3751514 xmax: 1002247 ymax: 4057630\n## Projected CRS: NAD27 / UTM zone 17N\n##                                x\n## 1 MULTIPOLYGON (((949976.3 40...\n#QGISのBuffer処理(1000 meter)\nq_alg = \"native:buffer\"\nq_alg_ret = qgis_run_algorithm(q_alg,\n                               INPUT = input_a,\n                               DISTANCE = 1000\n)\n\n#各州を結合して、表示用にWGS84に直す\na_sf = st_as_sf(q_alg_ret) %>% st_transform(crs=4326)\n\n#Leafletで表示\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data = input_disp, color=\"blue\") %>%\n  addPolylines(data = b_sf, weight=10,color=\"red\") %>%\n  addPolylines(data = a_sf, weight=5,color=\"green\") %>%\n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"ポリゴンにbufferを作成する.html","id":"最後に-8","chapter":"10 ポリゴンにBufferを作成する","heading":"10.8 最後に","text":"sfは、RでGISるときの基本です。覚えるとめっちゃ便利です。\nまた、QGIS Algorithmを利用できるのは、もっと便利かもしれない。（勉強中なう。）\nボロノイについて勉強して記事を書く予定です。","code":""},{"path":"prophetで時系列データを分析する.html","id":"prophetで時系列データを分析する","chapter":"11 Prophetで時系列データを分析する","heading":"11 Prophetで時系列データを分析する","text":"","code":""},{"path":"prophetで時系列データを分析する.html","id":"はじめに-6","chapter":"11 Prophetで時系列データを分析する","heading":"11.1 はじめに","text":"時系列データの分析です。","code":""},{"path":"prophetで時系列データを分析する.html","id":"使用するデータ-6","chapter":"11 Prophetで時系列データを分析する","heading":"11.2 使用するデータ","text":"日本のコロナの陽性者数データを使用します。厚生労働省HP\n[link] https://www.mhlw.go.jp/stf/covid-19/open-data.html","code":"\nread_df = read.csv(\n  \"https://covid19.mhlw.go.jp/public/opendata/newly_confirmed_cases_daily.csv\"\n  )[,c(\"Date\",\"ALL\")]\n\nsummary(read_df)##      Date                ALL        \n##  Length:1209        Min.   :     0  \n##  Class :character   1st Qu.:   577  \n##  Mode  :character   Median :  3872  \n##                     Mean   : 27906  \n##                     3rd Qu.: 34608  \n##                     Max.   :261735"},{"path":"prophetで時系列データを分析する.html","id":"package-9","chapter":"11 Prophetで時系列データを分析する","heading":"11.3 Package","text":"おすすめは、「Prophet」です。\nARIMAとかSARIMAとかあるようですが、難しそうで…。","code":"\nlibrary(tidyverse)\nlibrary(prophet)"},{"path":"prophetで時系列データを分析する.html","id":"入力データの準備","chapter":"11 Prophetで時系列データを分析する","heading":"11.4 入力データの準備","text":"prophetで分析するために、列名を整えます。","code":"\n#change\nread_df$Date = as.Date(read_df$Date)\ncolnames(read_df) = c(\"ds\",\"y\")\n\nsummary(read_df)##        ds                   y         \n##  Min.   :2020-01-16   Min.   :     0  \n##  1st Qu.:2020-11-13   1st Qu.:   577  \n##  Median :2021-09-11   Median :  3872  \n##  Mean   :2021-09-11   Mean   : 27906  \n##  3rd Qu.:2022-07-10   3rd Qu.: 34608  \n##  Max.   :2023-05-08   Max.   :261735"},{"path":"prophetで時系列データを分析する.html","id":"prophet分析モデルの作成","chapter":"11 Prophetで時系列データを分析する","heading":"11.5 prophet分析:モデルの作成","text":"prophetでは、まずモデルを作成します。\nパラメータは、適当に。","code":"\np_model = read_df %>% prophet(\n  growth = \"linear\",\n  # changepoints = NULL,\n  # n.changepoints = 25,\n  # changepoint.range = 0.8,\n  changepoint.prior.scale = 0.05,\n\n  seasonality.mode = \"multiplicative\",\n  seasonality.prior.scale = 10,\n  \n  yearly.seasonality = TRUE,\n  weekly.seasonality = TRUE,\n  daily.seasonality  = FALSE,\n  \n  holidays = NULL,\n  holidays.prior.scale = 10\n)"},{"path":"prophetで時系列データを分析する.html","id":"prophet分析将来の定義","chapter":"11 Prophetで時系列データを分析する","heading":"11.6 prophet分析:将来の定義","text":"将来を定義します。ここでは７日間にしました。","code":"\nfuture <- make_future_dataframe(p_model, periods = 7)"},{"path":"prophetで時系列データを分析する.html","id":"prophet分析モデルから将来を予測","chapter":"11 Prophetで時系列データを分析する","heading":"11.7 prophet分析:モデルから将来を予測","text":"そして予測します。","code":"\nforecast <- predict(p_model, future)\ntail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])##              ds        yhat yhat_lower yhat_upper\n## 1211 2023-05-10 -13476.4390  -29661.71   3565.914\n## 1212 2023-05-11 -12683.1817  -29245.92   4174.178\n## 1213 2023-05-12 -11075.8321  -28263.62   5199.992\n## 1214 2023-05-13 -11155.8936  -29194.97   6846.481\n## 1215 2023-05-14  -8438.3443  -24921.68   8782.427\n## 1216 2023-05-15   -502.3431  -17914.26  15388.492"},{"path":"prophetで時系列データを分析する.html","id":"prophet分析結果を出力１","chapter":"11 Prophetで時系列データを分析する","heading":"11.8 prophet分析:結果を出力１","text":"dygraphで簡単に出力までできます。","code":"\ndyplot.prophet(p_model, forecast)"},{"path":"prophetで時系列データを分析する.html","id":"prophet分析結果を出力２","chapter":"11 Prophetで時系列データを分析する","heading":"11.9 prophet分析:結果を出力２","text":"季節性とか、これで確認もできます。\n８月と１月が増えるトレンドとか…。月曜日が減るトレンドとか…。\nで、理由（因果）を考える感じになりますよね。","code":"\nprophet_plot_components(p_model, forecast)"},{"path":"prophetで時系列データを分析する.html","id":"prophet分析パラメータの調整","chapter":"11 Prophetで時系列データを分析する","heading":"11.10 prophet分析:パラメータの調整","text":"もう少し、データにフィットさせるには、パラメータを調整します。\nchangepoint.prior.scaleを0.02に変更してみます。\nうーーん、2022年あたりが微妙…。\n結局、ここらへんのパラメータを変更するって微妙な気がする。","code":"\np_model = read_df %>% prophet(\n  growth = \"linear\",\n  changepoint.prior.scale = 0.02,\n\n  seasonality.mode = \"multiplicative\",\n  seasonality.prior.scale = 10,\n  \n  yearly.seasonality = TRUE,\n  weekly.seasonality = TRUE,\n  daily.seasonality  = FALSE,\n  \n  holidays = NULL,\n  holidays.prior.scale = 10\n)\n\nfuture = make_future_dataframe(p_model, periods = 7)\nforecast = predict(p_model, future)\ndyplot.prophet(p_model, forecast)"},{"path":"prophetで時系列データを分析する.html","id":"最後に-9","chapter":"11 Prophetで時系列データを分析する","heading":"11.11 最後に","text":"簡単に将来を予測というか、簡単にモデルが作れるのがprophetのいいところですね。\n線形予測より説得力があるように見えますよね。","code":""},{"path":"jpgridでメッシュを作成する.html","id":"jpgridでメッシュを作成する","chapter":"12 jpgridでメッシュを作成する","heading":"12 jpgridでメッシュを作成する","text":"","code":""},{"path":"jpgridでメッシュを作成する.html","id":"package-10","chapter":"12 jpgridでメッシュを作成する","heading":"12.1 Package","text":"日本のGIS分析をするときにメッシュを使いますよね。\nRで日本のメッシュなら、「jpgrid」を使います。（新しい！！）","code":"\nlibrary(leaflet)\nlibrary(sf)\nlibrary(jpgrid)\nlibrary(dplyr)"},{"path":"jpgridでメッシュを作成する.html","id":"札幌市のデータ","chapter":"12 jpgridでメッシュを作成する","heading":"12.2 札幌市のデータ","text":"国土数値情報ダウンロードサイトにあるシェープファイルを読み込みます。","code":"\n# 国土数値情報 行政区域データの読み込み\nread_data = read_sf(\"N03-20200101_GML/N03-20_200101.shp\",\n                    options = \"ENCODING=CP932\")\n#札幌市のデータ（WGS84）\na_sf = subset(read_data, read_data$N03_003 == \"札幌市\") %>% st_union() %>% st_transform(4326)\n\n#output\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data=a_sf) %>% \n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"jpgridでメッシュを作成する.html","id":"ポリゴンからメッシュを作成","chapter":"12 jpgridでメッシュを作成する","heading":"12.3 ポリゴンからメッシュを作成","text":"札幌市のポリゴンから、10kmメッシュを作成します。","code":"\n#Create 10km Mesh\ngrid_10km = a_sf %>% geometry_to_grid(\"10km\") %>% do.call(\"c\", .)\nm_sf_10km = grid_10km %>% grid_as_sf(crs = 4326)\n\n#output\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data=a_sf) %>% \n  addPolygons(data=m_sf_10km, color=\"grey\") %>% \n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"jpgridでメッシュを作成する.html","id":"kmメッシュを1kmメッシュに分解","chapter":"12 jpgridでメッシュを作成する","heading":"12.4 10kmメッシュを1kmメッシュに分解","text":"作成した10kmメッシュを分解して、1kmメッシュにします。","code":"\n#10 km Mesh to 1 km Mesh\ngrid_1km = grid_subdivide(grid_10km, \"1km\") %>% do.call(\"c\", .)\nm_sf_1km = grid_1km %>% grid_as_sf(crs = 4326)\n\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data=a_sf) %>% \n  addPolygons(data=m_sf_1km, color=\"grey\") %>% \n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"jpgridでメッシュを作成する.html","id":"緯度経度からメッシュ作成","chapter":"12 jpgridでメッシュを作成する","heading":"12.5 緯度経度からメッシュ作成","text":"さくっと作成できます。","code":"\ngrid_100m = coords_to_grid(139.7008,35.68906,\"100m\")\nm_sf_100m = grid_100m %>% grid_as_sf(crs = 4326)\n\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data=m_sf_100m) %>% \n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"jpgridでメッシュを作成する.html","id":"隣接メッシュ作成ノイマン近傍","chapter":"12 jpgridでメッシュを作成する","heading":"12.6 隣接メッシュ作成（ノイマン近傍）","text":"メッシュに隣接するメッシュを作成できます。すごごご。","code":"\ngrid_100m_n = grid_100m %>% grid_neighborhood(\n  n = c(0:2),\n  type = \"von_neumann\",\n  simplify = FALSE)\n#grid_100m_n\nm_sf_100m_n = grid_100m_n[[1]]$grid_neighborhood %>% grid_as_sf(crs = 4326)\n#m_sf_100m_n\nm_sf_100m_nm = merge(m_sf_100m_n,grid_100m_n[1],\n                     by.x = c(\"grid\"), \n                     by.y = c(\"grid_neighborhood\"),\n                     all.x = TRUE)\n#m_sf_100m_nm\n#class(m_sf_100m_nm$n)\npal = colorNumeric(\"viridis\", domain=c(0:2))\n\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data=m_sf_100m_nm, \n              fillOpacity = 0.7,\n              fillColor = ~pal(n)\n              ) %>% \n  addLegend(data=m_sf_100m_nm,\n            position = \"bottomright\",\n            values = ~n, \n            pal = pal,\n            opacity = 1.0,\n            title = \"n\" ,\n            labFormat = labelFormat()) %>% \n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"jpgridでメッシュを作成する.html","id":"隣接メッシュ作成ムーア近傍","chapter":"12 jpgridでメッシュを作成する","heading":"12.7 隣接メッシュ作成（ムーア近傍）","text":"こっちの方が使うかも。","code":"\ngrid_100m_n = grid_100m %>% grid_neighborhood(\n  n = c(0:2),\n  type = \"moore\",\n  simplify = FALSE)\n#grid_100m_n\nm_sf_100m_n = grid_100m_n[[1]]$grid_neighborhood %>% grid_as_sf(crs = 4326)\n#m_sf_100m_n\nm_sf_100m_nm = merge(m_sf_100m_n,grid_100m_n[1],\n                     by.x = c(\"grid\"), \n                     by.y = c(\"grid_neighborhood\"),\n                     all.x = TRUE)\n#m_sf_100m_nm\n#class(m_sf_100m_nm$n)\npal = colorNumeric(\"viridis\", domain=c(0:2))\n\nleaflet() %>%\n  addTiles() %>%\n  addPolygons(data=m_sf_100m_nm, \n              fillOpacity = 0.7,\n              fillColor = ~pal(n)\n  ) %>% \n  addLegend(data=m_sf_100m_nm,\n            position = \"bottomright\",\n            values = ~n, \n            pal = pal,\n            opacity = 1.0,\n            title = \"n\" ,\n            labFormat = labelFormat()) %>% \n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"jpgridでメッシュを作成する.html","id":"最後に-10","chapter":"12 jpgridでメッシュを作成する","heading":"12.8 最後に","text":"jpgridの作成者に感謝です。本当に便利です。GIS楽しい！","code":""},{"path":"東京から真東を考える.html","id":"東京から真東を考える","chapter":"13 東京から真東を考える","heading":"13 東京から真東を考える","text":"","code":""},{"path":"東京から真東を考える.html","id":"はじめに-7","chapter":"13 東京から真東を考える","heading":"13.1 はじめに","text":"地球が丸いことを時々忘れる。そんな時は落ち着いて考える。","code":""},{"path":"東京から真東を考える.html","id":"package-11","chapter":"13 東京から真東を考える","heading":"13.2 Package","text":"今回は、「geosphere」です。","code":"\nlibrary(leaflet)\nlibrary(sf)\nlibrary(geosphere)\nlibrary(dplyr)"},{"path":"東京から真東を考える.html","id":"使用データ","chapter":"13 東京から真東を考える","heading":"13.3 使用データ","text":"東京駅のポイントを作成します。","code":"\ntokyo <- c(139.766905, 35.681242)\n\np_tokyo = st_sfc(st_point(tokyo), crs = 4326)\n\nleaflet() %>%\n  addTiles() %>%\n  addMarkers(data=p_tokyo) %>% \n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"東京から真東を考える.html","id":"真東９０度方向に1000km進む","chapter":"13 東京から真東を考える","heading":"13.4 真東（９０度）方向に1000km進む","text":"なんとなくだけど、北緯が同じところをイメージしますよね。違うんです。\n東京駅を基準に、真東（９０°）に、1000km進んでみましょう。NHKリンク\n[link] https://www2.nhk..jp/school/watch/clip/?das_id=D0005310422_00000","code":"\ntest_dist  = 1000 * 1000\ntest_angle = 90\nans = c(destPoint(tokyo, test_angle, test_dist))\n\np_ans   = st_sfc(st_point(ans), crs = 4326)\n\np_ans_line = st_sfc(st_linestring(rbind(tokyo,ans)), crs = 4326)\np_tokyo_buff = p_tokyo %>% st_transform(crs=32654) %>% \n  st_buffer(dist=test_dist) %>% \n  st_transform(crs=4326)\n\nleaflet() %>%\n  addTiles() %>%\n  addMarkers(data=p_tokyo) %>% \n  addMarkers(data=p_ans) %>% \n  addPolylines(data=p_ans_line) %>% \n  addPolylines(data=p_tokyo_buff) %>% \n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"東京から真東を考える.html","id":"最後に-11","chapter":"13 東京から真東を考える","heading":"13.5 最後に","text":"地球は丸い。","code":""},{"path":"rasterの基本1.html","id":"rasterの基本1","chapter":"14 Rasterの基本1","heading":"14 Rasterの基本1","text":"","code":""},{"path":"rasterの基本1.html","id":"package-12","chapter":"14 Rasterの基本1","heading":"14.1 Package","text":"今現在は、「terra」です。","code":"\nlibrary(sf)\nlibrary(terra)\nlibrary(ggplot2)"},{"path":"rasterの基本1.html","id":"ラスターの作成","chapter":"14 Rasterの基本1","heading":"14.2 ラスターの作成","text":"ラスターは、以下のように作成することができます。","code":"\n#Create 5x5 raster\nraster_1 = rast(\n  ncol=5,nrow=5,\n  xmin=0, xmax=5, ymin=0, ymax=5\n)\n# raster_1\n\nvalues(raster_1) = c(1:ncell(raster_1))\nraster_1## class       : SpatRaster \n## dimensions  : 5, 5, 1  (nrow, ncol, nlyr)\n## resolution  : 1, 1  (x, y)\n## extent      : 0, 5, 0, 5  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84) \n## source(s)   : memory\n## name        : lyr.1 \n## min value   :     1 \n## max value   :    25\n#output\nplot(raster_1,main=\"raster_1\")\ntext(raster_1,col=\"white\")"},{"path":"rasterの基本1.html","id":"ラスターの作成2","chapter":"14 Rasterの基本1","heading":"14.3 ラスターの作成2","text":"続いて、もう一つのラスターを作成します。値はランダムに。","code":"\n#Create 5x5 raster\nraster_2 = rast(\n  ncol=5,nrow=5,\n  xmin=0, xmax=5, ymin=0, ymax=5\n)\n# raster_1\n\nvalues(raster_2) = sample(ncell(raster_2))\nraster_2## class       : SpatRaster \n## dimensions  : 5, 5, 1  (nrow, ncol, nlyr)\n## resolution  : 1, 1  (x, y)\n## extent      : 0, 5, 0, 5  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84) \n## source(s)   : memory\n## name        : lyr.1 \n## min value   :     1 \n## max value   :    25\n#output\nplot(raster_2,main=\"raster_2\")\ntext(raster_2,col=\"white\")"},{"path":"rasterの基本1.html","id":"ラスターの合計","chapter":"14 Rasterの基本1","heading":"14.4 ラスターの合計","text":"ラスター同士は、合計だってできます。","code":"\nr_sum = raster_1 + raster_2\n\n#output\nplot(r_sum,main=\"r_sum\")\ntext(r_sum,col=\"white\")"},{"path":"rasterの基本1.html","id":"最後に-12","chapter":"14 Rasterの基本1","heading":"14.5 最後に","text":"ラスター、楽しい！","code":""},{"path":"rasterの基本2.html","id":"rasterの基本2","chapter":"15 Rasterの基本2","heading":"15 Rasterの基本2","text":"","code":""},{"path":"rasterの基本2.html","id":"package-13","chapter":"15 Rasterの基本2","heading":"15.1 Package","text":"今回も「terra」です。","code":"\nlibrary(sf)\nlibrary(terra)"},{"path":"rasterの基本2.html","id":"はじめに-8","chapter":"15 Rasterの基本2","heading":"15.2 はじめに","text":"今回は、異なるラスター同士を集計します。この場合は、集計ラスターを用意します。","code":""},{"path":"rasterの基本2.html","id":"集計ラスターの作成","chapter":"15 Rasterの基本2","heading":"15.3 集計ラスターの作成","text":"10x10の集計用ラスタです。","code":"\n#Create 5x5 raster\nr_s = rast(\n  ncol=10,nrow=10,\n  xmin=0, xmax=10, ymin=0, ymax=10\n)\n\nvalues(r_s) = 0\nr_s## class       : SpatRaster \n## dimensions  : 10, 10, 1  (nrow, ncol, nlyr)\n## resolution  : 1, 1  (x, y)\n## extent      : 0, 10, 0, 10  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84) \n## source(s)   : memory\n## name        : lyr.1 \n## min value   :     0 \n## max value   :     0\n#output\nplot(r_s,main=\"r_s\")"},{"path":"rasterの基本2.html","id":"ラスターの作成-1","chapter":"15 Rasterの基本2","heading":"15.4 ラスターの作成","text":"前回のラスタです。これを集計用ラスタでリサンプルします。","code":"\n#Create 5x5 raster\nraster_1 = rast(\n  ncol=5,nrow=5,\n  xmin=0, xmax=5, ymin=0, ymax=5\n)\nvalues(raster_1) = c(1:ncell(raster_1))\n\n#resample\nraster_1 = resample(raster_1,r_s,method=\"near\")\n\n#NAのところは0に置き換え\n#raster_1[is.na(raster_1)]=0\n\n#output\nplot(raster_1,main=\"raster_1(resample)\")\ntext(raster_1,col=\"white\")"},{"path":"rasterの基本2.html","id":"ラスターの作成2-1","chapter":"15 Rasterの基本2","heading":"15.5 ラスターの作成2","text":"続いて、異なる位置、大きさを持つラスターを作成し、リサンプルます。","code":"\n#Create 2x2 raster\nraster_2 = rast(\n  ncol=2,nrow=2,\n  xmin=3, xmax=7, ymin=3, ymax=7\n)\nvalues(raster_2) = c(1:ncell(raster_2))\n\n#resample\nraster_2 = resample(raster_2,r_s,method=\"near\")\n#output\nplot(raster_2,main=\"raster_2(resample)\")\ntext(raster_2,col=\"white\")"},{"path":"rasterの基本2.html","id":"ラスターの合計-1","chapter":"15 Rasterの基本2","heading":"15.6 ラスターの合計","text":"ここまでくれば、あと少し！\nラスターにNAを含むので、appで合計を出します。","code":"\nx = sds(raster_1, raster_2)\nr_sum = app(x, fun = \"sum\", na.rm = TRUE)\n\n#output\nplot(r_sum,main=\"r_sum\")\ntext(r_sum,col=\"white\")"},{"path":"rasterの基本2.html","id":"最後に-13","chapter":"15 Rasterの基本2","heading":"15.7 最後に","text":"ラスター、楽しい！","code":""},{"path":"rasterの基本3.html","id":"rasterの基本3","chapter":"16 Rasterの基本3","heading":"16 Rasterの基本3","text":"","code":""},{"path":"rasterの基本3.html","id":"package-14","chapter":"16 Rasterの基本3","heading":"16.1 Package","text":"今回も「terra」です。","code":"\nlibrary(sf)\nlibrary(terra)"},{"path":"rasterの基本3.html","id":"はじめに-9","chapter":"16 Rasterの基本3","heading":"16.2 はじめに","text":"今回は、点の数をラスターで集計します。","code":""},{"path":"rasterの基本3.html","id":"集計ラスターの作成-1","chapter":"16 Rasterの基本3","heading":"16.3 集計ラスターの作成","text":"5x5の集計用ラスタです。","code":"\n#Create 5x5 raster\nr_s = rast(\n  ncol=5,nrow=5,\n  xmin=0, xmax=10, ymin=0, ymax=10\n)\nvalues(r_s) = 0\n\n#output\nplot(r_s,main=\"r_s\")"},{"path":"rasterの基本3.html","id":"点データを作成","chapter":"16 Rasterの基本3","heading":"16.4 点データを作成","text":"点を作成します。SpatVector型にしましょう。","code":"\np_df = data.frame(rbind(\n  c(1,1),\n  c(3,3),\n  c(5,7),\n  c(9,3)\n))\n#Create SpatVector \np_vec = vect(p_df, geom=c(\"X1\", \"X2\"))\np_vec##  class       : SpatVector \n##  geometry    : points \n##  dimensions  : 4, 0  (geometries, attributes)\n##  extent      : 1, 9, 1, 7  (xmin, xmax, ymin, ymax)\n##  coord. ref. :\nplot(p_vec,col=\"red\",cex=1)"},{"path":"rasterの基本3.html","id":"点の数をカウント","chapter":"16 Rasterの基本3","heading":"16.5 点の数をカウント","text":"rasterizeで、点の数をカウントします。","code":"\n#count\npc_r = rasterize(p_vec,r_s,fun=\"count\") \n\n#NAのところは0に置き換え\nvalues(pc_r)[is.na(values(pc_r))] = 0\n\nplot(pc_r,main=\"count\",buffer=TRUE,type = 'continuous')\ntext(pc_r,col=\"white\")\npoints(p_vec,col=\"red\",cex=1)"},{"path":"rasterの基本3.html","id":"多数の点の数をカウント","chapter":"16 Rasterの基本3","heading":"16.6 多数の点の数をカウント","text":"rasterizeで点の数をカウントします。","code":"\np_df = data.frame(rbind(\n  c(1,1),\n  c(3,3),\n  c(5,7),\n  c(5.1,7.2),\n  c(5.3,7.2),\n  c(5.4,7.3),\n  c(5.9,7.9),\n  c(9,3),\n  c(3.5,3.5)\n))\np_vec = vect(p_df, geom=c(\"X1\", \"X2\"))\n\n#count\npc_r = rasterize(p_vec,r_s,fun=\"count\") \npc_r## class       : SpatRaster \n## dimensions  : 5, 5, 1  (nrow, ncol, nlyr)\n## resolution  : 2, 2  (x, y)\n## extent      : 0, 10, 0, 10  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (CRS84) (OGC:CRS84) \n## source(s)   : memory\n## name        : count \n## min value   :     1 \n## max value   :     5\n#NAのところは0に置き換え\nvalues(pc_r)[is.na(values(pc_r))] = 0\n\nplot(pc_r,main=\"count\",buffer=TRUE,type = 'continuous')\ntext(pc_r,col=\"white\")\npoints(p_vec,col=\"red\",cex=1)"},{"path":"rasterの基本3.html","id":"境界線上の点は","chapter":"16 Rasterの基本3","heading":"16.7 境界線上の点は…","text":"こんな感じで、ダブルカウントはなく、使いやすいです。","code":"\np_df = data.frame(rbind(\n  c(0,2),\n  c(4,0),\n  c(4,2),\n  c(4,4),\n  c(4,5),\n  c(4,6),\n  c(5,6),\n  c(6,6),\n  c(8,8),\n  c(10,10)\n))\np_vec = vect(p_df, geom=c(\"X1\", \"X2\"))\n\n#count\npc_r = rasterize(p_vec,r_s,fun=\"count\") \n# pc_r\n\n#NAのところは0に置き換え\nvalues(pc_r)[is.na(values(pc_r))] = 0\n\nplot(pc_r,main=\"count\",buffer=TRUE,type = 'continuous')\ntext(pc_r,col=\"white\")\npoints(p_vec,col=\"red\",cex=1)"},{"path":"rasterの基本3.html","id":"最後に-14","chapter":"16 Rasterの基本3","heading":"16.8 最後に","text":"ラスター集計、楽しい！！","code":""},{"path":"地図上の点をラスターで集計する.html","id":"地図上の点をラスターで集計する","chapter":"17 地図上の点をラスターで集計する","heading":"17 地図上の点をラスターで集計する","text":"","code":""},{"path":"地図上の点をラスターで集計する.html","id":"package-15","chapter":"17 地図上の点をラスターで集計する","heading":"17.1 Package","text":"今回も「terra」です。","code":"\nlibrary(sf)\nlibrary(terra)\nlibrary(dplyr)\nlibrary(leaflet)"},{"path":"地図上の点をラスターで集計する.html","id":"はじめに-10","chapter":"17 地図上の点をラスターで集計する","heading":"17.2 はじめに","text":"今回は、地図上の点の数をラスターで集計します。","code":""},{"path":"地図上の点をラスターで集計する.html","id":"地図上の点データの作成","chapter":"17 地図上の点をラスターで集計する","heading":"17.3 地図上の点データの作成","text":"テストデータを作成します。","code":"\ntest_n = 50\np_df = data.frame(\n  id=seq(1:test_n),\n  lon=139.7+as.integer(runif(test_n,0,99))/1000,\n  lat=35.6+as.integer(runif(test_n,0,99))/1000,\n  value=as.integer(runif(test_n,0,99))\n)\np_sf = p_df %>% st_as_sf(coords = c(\"lon\", \"lat\"),crs=4326)\n# p_sf\np_vec = vect(p_sf)\n\n#mapView(p_vec,color=\"red\",col.regions =\"red\")\nleaflet() %>%\n  addTiles() %>% \n  addCircles(data=p_sf,col=\"red\")"},{"path":"地図上の点をラスターで集計する.html","id":"ラスターで集計する","chapter":"17 地図上の点をラスターで集計する","heading":"17.4 ラスターで集計する","text":"10x10の集計用ラスタを作成し、rasterizeでcount集計します。","code":"\n#集計用のBBOXの設定\nb_df = data.frame(\n  lon=c(139.7,139.8),\n  lat=c(35.6,35.7)\n)\nb_sf = b_df %>% st_as_sf(coords = c(\"lon\", \"lat\"),crs=4326)\n\n#Create 10x10 raster\nr_s = rast(\n  ncol=10,nrow=10,\n  xmin=139.7, xmax=139.8, ymin=35.6, ymax=35.7,\n  crs = crs(b_sf)\n)\nr_s## class       : SpatRaster \n## dimensions  : 10, 10, 1  (nrow, ncol, nlyr)\n## resolution  : 0.01, 0.01  (x, y)\n## extent      : 139.7, 139.8, 35.6, 35.7  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326)\n#count\npc_r = rasterize(p_vec,r_s,fun=\"count\") \npc_r## class       : SpatRaster \n## dimensions  : 10, 10, 1  (nrow, ncol, nlyr)\n## resolution  : 0.01, 0.01  (x, y)\n## extent      : 139.7, 139.8, 35.6, 35.7  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source(s)   : memory\n## name        : count \n## min value   :     1 \n## max value   :     3\n#NAのところは0に置き換え\nvalues(pc_r)[is.na(values(pc_r))] = 0\n\nplot(pc_r)"},{"path":"地図上の点をラスターで集計する.html","id":"gridポリゴンの作成","chapter":"17 地図上の点をラスターで集計する","heading":"17.5 Gridポリゴンの作成","text":"Leafletに出力する場合は、\nまず、集計ラスターと同様のst_make_grid()でGridポリゴンを作成します。","code":"\nsf_grid = st_sf(geometory=st_make_grid(b_sf,n = c(10, 10)),crs=4326)\n#gridにidを割り振る\nsf_grid$id = seq(1:nrow(sf_grid))\nsf_grid## Simple feature collection with 100 features and 1 field\n## Geometry type: POLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 139.7 ymin: 35.6 xmax: 139.8 ymax: 35.7\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##                         geometory id\n## 1  POLYGON ((139.7 35.6, 139.7...  1\n## 2  POLYGON ((139.71 35.6, 139....  2\n## 3  POLYGON ((139.72 35.6, 139....  3\n## 4  POLYGON ((139.73 35.6, 139....  4\n## 5  POLYGON ((139.74 35.6, 139....  5\n## 6  POLYGON ((139.75 35.6, 139....  6\n## 7  POLYGON ((139.76 35.6, 139....  7\n## 8  POLYGON ((139.77 35.6, 139....  8\n## 9  POLYGON ((139.78 35.6, 139....  9\n## 10 POLYGON ((139.79 35.6, 139.... 10\nleaflet() %>%\n  addTiles() %>% \n  addPolygons(data=sf_grid)"},{"path":"地図上の点をラスターで集計する.html","id":"gridポリゴンと集計ラスタを結びつける","chapter":"17 地図上の点をラスターで集計する","heading":"17.6 Gridポリゴンと集計ラスタを結びつける","text":"gridポリゴンのidを、集計ラスタでrasterizeして、idをカウントしたラスターに結びつけします。","code":"\nsf_grid_r = rasterize(sf_grid, r_s, \"id\")\n# plot(sf_grid_r)\n# sf_grid_r\n\n#id copy to pc_r\npc_r$id = values(sf_grid_r)\nplot(pc_r)"},{"path":"地図上の点をラスターで集計する.html","id":"idをキーにしてgridポリゴンに戻す","chapter":"17 地図上の点をラスターで集計する","heading":"17.7 idをキーにしてGridポリゴンに戻す","text":"データフレームにして、idをキーにSFポリゴンをマージします。","code":"\npc_df = data.frame(values(pc_r))\npc_df = merge(\n  pc_df,\n  sf_grid,\n  by.x = c(\"id\"), \n  by.y = c(\"id\"),\n  all.x = TRUE\n)\npc_sf = st_as_sf(pc_df)\npc_sf## Simple feature collection with 100 features and 2 fields\n## Geometry type: POLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 139.7 ymin: 35.6 xmax: 139.8 ymax: 35.7\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##    id count                      geometory\n## 1   1     0 POLYGON ((139.7 35.6, 139.7...\n## 2   2     0 POLYGON ((139.71 35.6, 139....\n## 3   3     0 POLYGON ((139.72 35.6, 139....\n## 4   4     0 POLYGON ((139.73 35.6, 139....\n## 5   5     0 POLYGON ((139.74 35.6, 139....\n## 6   6     0 POLYGON ((139.75 35.6, 139....\n## 7   7     1 POLYGON ((139.76 35.6, 139....\n## 8   8     0 POLYGON ((139.77 35.6, 139....\n## 9   9     0 POLYGON ((139.78 35.6, 139....\n## 10 10     0 POLYGON ((139.79 35.6, 139...."},{"path":"地図上の点をラスターで集計する.html","id":"leafletに表示","chapter":"17 地図上の点をラスターで集計する","heading":"17.8 Leafletに表示","text":"ここまでできれば、表示できます！","code":"\npal = colorNumeric(\"viridis\", domain=c(0:max(pc_sf$count,na.rm=TRUE)))\nleaflet() %>%\n  addTiles() %>% \n  addPolygons(data=pc_sf, \n              stroke = FALSE,\n              fillOpacity = 0.7,\n              fillColor = ~pal(count)\n  ) %>% \n  addLegend(data=pc_sf,\n            position = \"bottomright\",\n            values = ~count, \n            pal = pal,\n            opacity = 1.0,\n            title = \"count\" ,\n            labFormat = labelFormat()) %>% \n  addCircles(data=p_sf,col=\"red\") %>%\n  addScaleBar(position = \"bottomleft\",scaleBarOptions(imperial = FALSE))"},{"path":"地図上の点をラスターで集計する.html","id":"最後に-15","chapter":"17 地図上の点をラスターで集計する","heading":"17.9 最後に","text":"ラスター集計、楽しい！！","code":""},{"path":"ラスターの距離.html","id":"ラスターの距離","chapter":"18 ラスターの距離","heading":"18 ラスターの距離","text":"","code":""},{"path":"ラスターの距離.html","id":"package-16","chapter":"18 ラスターの距離","heading":"18.1 Package","text":"今回も「terra」です。","code":"\nlibrary(sf)\nlibrary(terra)\nlibrary(dplyr)"},{"path":"ラスターの距離.html","id":"はじめに-11","chapter":"18 ラスターの距離","heading":"18.2 はじめに","text":"今回は、ラスターで距離を表現したいと思います。","code":""},{"path":"ラスターの距離.html","id":"ラスターと点を作成","chapter":"18 ラスターの距離","heading":"18.3 ラスターと点を作成","text":"理解をするために、簡単な5x5ラスターと、その中心となる点(2.5,2.5)を用意します。","code":"\n#Create s raster\nr_s = rast(\n  ncol=5,nrow=5,\n  xmin=0, xmax=5, ymin=0, ymax=5,\n  crs=\"local\"\n)\nvalues(r_s) = 0\n\n#Create point vector\np_df = data.frame(rbind(\n  c(2.5,2.5)\n))\np_vec = vect(p_df, geom=c(\"X1\", \"X2\"), crs=crs(r_s))\np_vec##  class       : SpatVector \n##  geometry    : points \n##  dimensions  : 1, 0  (geometries, attributes)\n##  extent      : 2.5, 2.5, 2.5, 2.5  (xmin, xmax, ymin, ymax)\n##  coord. ref. : Cartesian (Meter)\nplot(r_s)\npoints(p_vec,col=\"red\",cex=1)"},{"path":"ラスターの距離.html","id":"点からの距離","chapter":"18 ラスターの距離","heading":"18.4 点からの距離","text":"distanceにより、距離を計算できます。素晴らしい。","code":"\n#calc distance\nr_d <- distance(r_s, p_vec)\nr_d## class       : SpatRaster \n## dimensions  : 5, 5, 1  (nrow, ncol, nlyr)\n## resolution  : 1, 1  (x, y)\n## extent      : 0, 5, 0, 5  (xmin, xmax, ymin, ymax)\n## coord. ref. : Cartesian (Meter) \n## source(s)   : memory\n## name        :    lyr.1 \n## min value   : 0.000000 \n## max value   : 2.828427\nplot(r_d,main=\"distance from point\",buffer=TRUE,type = 'continuous',decreasing=TRUE)\ntext(r_d,col=\"white\",digits=1)\npoints(p_vec,col=\"red\",cex=1)"},{"path":"ラスターの距離.html","id":"複数の点","chapter":"18 ラスターの距離","heading":"18.5 複数の点","text":"複数の点でも計算しましょう。点から一番近い距離を簡単に求められるなんて最高です。これは、もはやボロノイです。美しい。","code":"\n#Create s raster\nr_s = rast(\n  ncol=1000,nrow=1000,\n  xmin=0, xmax=100, ymin=0, ymax=100,\n  crs=\"local\"\n)\nvalues(r_s) = 0\n\n#Create point vector\ntest_n = 10\np_df = data.frame(\n  X=as.integer(runif(test_n,0,99)),\n  Y=as.integer(runif(test_n,0,99))\n)\np_vec = vect(p_df, geom=c(\"X\", \"Y\"), crs=crs(r_s))\n\n#output\n#plot(r_s)\n#points(p_vec,col=\"red\",cex=1)\n\n#distance\nr_d <- distance(r_s, p_vec)\nr_d## class       : SpatRaster \n## dimensions  : 1000, 1000, 1  (nrow, ncol, nlyr)\n## resolution  : 0.1, 0.1  (x, y)\n## extent      : 0, 100, 0, 100  (xmin, xmax, ymin, ymax)\n## coord. ref. : Cartesian (Meter) \n## source(s)   : memory\n## name        :       lyr.1 \n## min value   :  0.07071068 \n## max value   : 44.12714584\nplot(r_d,main=\"distance from points\",buffer=TRUE,type = 'continuous')\npoints(p_vec,col=\"red\",cex=1)"},{"path":"ラスターの距離.html","id":"ラインからのラスター距離","chapter":"18 ラスターの距離","heading":"18.6 ラインからのラスター距離","text":"ラインからの距離も。","code":"\n#Create s raster\nr_s = rast(\n  ncol=100,nrow=100,\n  xmin=0, xmax=5, ymin=0, ymax=5,\n  crs=\"local\"\n)\n\n#Create Line\nvec1 = rbind(c(1,1),c(2,3),c(4,2),c(4,4))\np_vec = vect(list(vec1), \"lines\", crs=\"local\") %>% aggregate()\n\n#distance\nr_d <- distance(r_s, p_vec)\nr_d## class       : SpatRaster \n## dimensions  : 100, 100, 1  (nrow, ncol, nlyr)\n## resolution  : 0.05, 0.05  (x, y)\n## extent      : 0, 5, 0, 5  (xmin, xmax, ymin, ymax)\n## coord. ref. : Cartesian (Meter) \n## source(s)   : memory\n## name        :      lyr.1 \n## min value   : 0.01118034 \n## max value   : 2.79307179\nplot(r_d,main=\"distance from lines\",buffer=TRUE,type = 'continuous')\nlines(p_vec, col=\"red\")"},{"path":"ラスターの距離.html","id":"ポリゴンからのラスター距離","chapter":"18 ラスターの距離","heading":"18.7 ポリゴンからのラスター距離","text":"ポリゴンからの距離も。","code":"\n#Create s raster\nr_s = rast(\n  ncol=100,nrow=100,\n  xmin=0, xmax=5, ymin=0, ymax=5,\n  crs=\"local\"\n)\n\n#Create Line\nvec1 = rbind(c(1,1),c(1,2),c(3,2),c(3,1),c(1,1))\np_vec = vect(list(vec1), \"Polygons\", crs=\"local\") %>% aggregate()\n\n#distance\nr_d <- distance(r_s, p_vec)\nr_d## class       : SpatRaster \n## dimensions  : 100, 100, 1  (nrow, ncol, nlyr)\n## resolution  : 0.05, 0.05  (x, y)\n## extent      : 0, 5, 0, 5  (xmin, xmax, ymin, ymax)\n## coord. ref. : Cartesian (Meter) \n## source(s)   : memory\n## name        :    lyr.1 \n## min value   : 0.000000 \n## max value   : 3.570889\nplot(r_d,main=\"distance from polygon\",buffer=TRUE,type = 'continuous')\npolys(p_vec, col=\"red\")"},{"path":"ラスターの距離.html","id":"最後に-16","chapter":"18 ラスターの距離","heading":"18.8 最後に","text":"これを使えば加重ボロノイ図もできる気がする。","code":""}]
